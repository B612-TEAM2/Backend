Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f7b5d0e3-c203-4ac2-8340-d5731dea6b7c\" name=\"Changes\" comment=\"Naver 소셜로그인 구현\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Friendship.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Friendship.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$/ping\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$/ping\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2aO5QEjUgFEpj0eFr9ieXL95cNz\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RequestMappingsPanelOrder0\": \"0\",\r\n    \"RequestMappingsPanelOrder1\": \"1\",\r\n    \"RequestMappingsPanelWidth0\": \"75\",\r\n    \"RequestMappingsPanelWidth1\": \"75\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\": \"JUnit5\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\": \"\",\r\n    \"git-widget-placeholder\": \"KimHwanJun\",\r\n    \"last_opened_file_path\": \"C:/Users/Administrator/Desktop/B612project_backend/Backend\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"configurable.group.build\",\r\n    \"spring.configuration.checksum\": \"cc8741b3fc961a1221529fe862d8a73f\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"com.b6122.ping.service\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Spring Boot.PingApplication\">\r\n    <configuration name=\"ping\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" nameIsGenerated=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$/ping\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list />\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"PingApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <module name=\"ping.main\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.b6122.ping.PingApplication\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.b6122.ping.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Spring Boot.PingApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f7b5d0e3-c203-4ac2-8340-d5731dea6b7c\" name=\"Changes\" comment=\"\" />\r\n      <created>1704176766234</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1704176766234</updated>\r\n      <workItem from=\"1704176767281\" duration=\"80000\" />\r\n      <workItem from=\"1707023420156\" duration=\"2448000\" />\r\n      <workItem from=\"1707106014591\" duration=\"47507000\" />\r\n      <workItem from=\"1707195425103\" duration=\"7251000\" />\r\n      <workItem from=\"1707703301460\" duration=\"1755000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Post 수정, google 로그인 구현\">\r\n      <created>1705639450008</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705639450008</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Naver 소셜로그인 구현\">\r\n      <created>1705650308048</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705650308048</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Post수정\">\r\n      <created>1706864177067</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1706864177067</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Post 수정, google 로그인 구현\" />\r\n    <MESSAGE value=\"likeCount 수정\" />\r\n    <MESSAGE value=\"Naver 소셜로그인 구현\" />\r\n    <MESSAGE value=\"Post수정\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Post수정\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/repository/PostRepository.java</url>\r\n          <line>75</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,9 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="f7b5d0e3-c203-4ac2-8340-d5731dea6b7c" name="Changes" comment="Naver 소셜로그인 구현">
+    <list default="true" id="fef37b95-584d-4288-b5ce-b5f9d3da0e2f" name="Changes" comment="post friend, public 구현">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Friendship.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Friendship.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/controller/PostController.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/controller/PostController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Post.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/domain/Post.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/dto/PostDto.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/dto/PostDto.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/repository/PostRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/repository/PostRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/service/PostService.java" beforeDir="false" afterPath="$PROJECT_DIR$/ping/src/main/java/com/b6122/ping/service/PostService.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -59,28 +63,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RequestMappingsPanelOrder0": "0",
-    "RequestMappingsPanelOrder1": "1",
-    "RequestMappingsPanelWidth0": "75",
-    "RequestMappingsPanelWidth1": "75",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
-    "git-widget-placeholder": "KimHwanJun",
-    "last_opened_file_path": "C:/Users/Administrator/Desktop/B612project_backend/Backend",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "configurable.group.build",
-    "spring.configuration.checksum": "cc8741b3fc961a1221529fe862d8a73f",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
+    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
+    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
+    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;KimHwanJun&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Administrator/Desktop/B612project_backend/Backend&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.build&quot;,
+    &quot;spring.configuration.checksum&quot;: &quot;cc8741b3fc961a1221529fe862d8a73f&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CreateTestDialog.Recents.Supers">
       <recent name="" />
@@ -89,7 +93,7 @@
       <recent name="com.b6122.ping.service" />
     </key>
   </component>
-  <component name="RunManager" selected="Spring Boot.PingApplication">
+  <component name="RunManager" selected="Gradle.ping">
     <configuration name="ping" type="GradleRunConfiguration" factoryName="Gradle" nameIsGenerated="true">
       <ExternalSystemSettings>
         <option name="executionName" />
@@ -107,7 +111,6 @@
       <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
       <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
       <DebugAllEnabled>false</DebugAllEnabled>
-      <RunAsTest>false</RunAsTest>
       <method v="2" />
     </configuration>
     <configuration name="PingApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" temporary="true" nameIsGenerated="true">
@@ -124,11 +127,6 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Spring Boot.PingApplication" />
-      </list>
-    </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
Index: ping/src/main/java/com/b6122/ping/controller/PostController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b6122.ping.controller;\r\n\r\nimport com.b6122.ping.auth.PrincipalDetails;\r\nimport com.b6122.ping.dto.PostDto;\r\nimport com.b6122.ping.service.PostService;\r\nimport lombok.Getter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@Getter@Setter\r\n@RestController\r\n@RequiredArgsConstructor\r\npublic class PostController {\r\n    private final PostService postService;\r\n\r\n    //글 작성 후 디비 저장\r\n    @PostMapping(\"/posts/home/store\")\r\n    public ResponseEntity<Long> getPost(@RequestBody @Validated PostDto postDto,\r\n                                        Authentication authentication){\r\n        PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();\r\n        postDto.setUid(principalDetails.getUser().getId());\r\n        Long pid = postService.createPost(postDto);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(pid);\r\n    }\r\n\r\n    //글 수정 후 디비 저장\r\n    @PostMapping(\"/posts/home/edit\")\r\n    public ResponseEntity modifyPost(@RequestBody @Validated PostDto postDto){\r\n        Long pid = postService.modifyPost(postDto);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(pid);\r\n    }\r\n\r\n    //글 정보 반환, 조회수 ++\r\n    @GetMapping(\"/postInfo/{id}\")\r\n    public ResponseEntity<PostDto> postInfo(@PathVariable(\"id\") Long pid,Authentication authentication ) {\r\n        PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();\r\n        Long uid = principalDetails.getUser().getId();\r\n        PostDto pd = postService.getPostInfo(pid, uid);\r\n        return ResponseEntity.ok(pd);\r\n    }\r\n\r\n    //좋아요 update\r\n    @PostMapping(\"/likeToggle\")\r\n    public ResponseEntity<String> toggleLike(@RequestParam long pid, @RequestParam long uid) {\r\n        postService.toggleLike(pid, uid);\r\n        return ResponseEntity.ok(\"Like toggled successfully\");\r\n    }\r\n\r\n\r\n    //pin클릭 시 글 목록 반환, pid 리스트를 받아 반환, home friends public 동일\r\n    @GetMapping(\"/posts/clickPin\")//map -> clickPin 변경\r\n    public ResponseEntity<List<PostDto>> postsPreviewPin(List<Long> pids){\r\n        List<PostDto> posts = postService.getPostsPreviewPin(pids);\r\n        return ResponseEntity.ok(posts);\r\n    }\r\n\r\n    //Home\r\n\r\n    //Home-Map, 내 모든 글의 pin 반환\r\n    @GetMapping(\"/posts/home/pins\")\r\n    public ResponseEntity<List<PostDto>> showPinsHome(Authentication authentication) {\r\n        PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();\r\n        Long uid = principalDetails.getUser().getId();\r\n        List<PostDto> posts = postService.getPinsHomeMap(uid);\r\n        return ResponseEntity.ok(posts);\r\n    }\r\n\r\n    //Home-List 토글, postList 반환\r\n    @GetMapping(\"/posts/home/list\")\r\n    public ResponseEntity<List<PostDto>> showPostsHomeList(Authentication authentication) {\r\n        PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();\r\n        Long uid = principalDetails.getUser().getId();\r\n        List<PostDto> posts = postService.getPostsHomeList(uid);\r\n        return ResponseEntity.ok().body(posts);\r\n    }\r\n\r\n\r\n\r\n\r\n    //Friend\r\n\r\n    //pins 반환, 친구 id 를 리스트로 받아 공개범위가 private이 아닌 것만 pid, 위도 경도 반환\r\n    @GetMapping(\"/posts/friends/pins\")\r\n    public ResponseEntity<List<PostDto>> showPinsFriends(@RequestParam List<Long> uids) {\r\n        List<PostDto> posts = postService.getPinsFriendsMap(uids);\r\n        return ResponseEntity.ok(posts);\r\n    }\r\n\r\n\r\n    //친구 글 목록 preview 반환, 친구 id를 리스트로 받아 scope가 friend, public 인 것만 최신순으로 반환\r\n    @GetMapping(\"/posts/friends/list\")\r\n    public ResponseEntity<List<PostDto>> showPostsFriendsList(@RequestParam List<Long> uids) {\r\n        List<PostDto> posts = postService.getPostsFriendsList(uids);\r\n        return ResponseEntity.ok().body(posts);\r\n    }\r\n\r\n\r\n\r\n\r\n    //public\r\n\r\n    //public pin반환, public인 모든 글 반환? // 조건은 나중에 결정. 일단 모두 반환\r\n    @GetMapping(\"/posts/public/pins\")\r\n    public ResponseEntity<List<PostDto>> showPinsPubic() {\r\n        List<PostDto> posts = postService.getPinsPublicMap();\r\n        return ResponseEntity.ok(posts);\r\n    }\r\n\r\n\r\n    //public list 반환, //조건은 나중에 결정\r\n\r\n    @GetMapping(\"/posts/public/list\")\r\n    public ResponseEntity<List<PostDto>> showPostsPubicList() {\r\n        List<PostDto> posts = postService.getPostsPublicList();\r\n        return ResponseEntity.ok(posts);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ping/src/main/java/com/b6122/ping/controller/PostController.java b/ping/src/main/java/com/b6122/ping/controller/PostController.java
--- a/ping/src/main/java/com/b6122/ping/controller/PostController.java	
+++ b/ping/src/main/java/com/b6122/ping/controller/PostController.java	
@@ -107,19 +107,18 @@
 
     //public
 
-    //public pin반환, public인 모든 글 반환? // 조건은 나중에 결정. 일단 모두 반환
+    //public pin반환, 현 위치에서 반경 2km 내에 public인 모든 글 반환
     @GetMapping("/posts/public/pins")
-    public ResponseEntity<List<PostDto>> showPinsPubic() {
-        List<PostDto> posts = postService.getPinsPublicMap();
+    public ResponseEntity<List<PostDto>> showPinsPubic(float latitude, float longitude) {
+        List<PostDto> posts = postService.getPinsPublicMap(latitude, longitude);
         return ResponseEntity.ok(posts);
     }
 
 
-    //public list 반환, //조건은 나중에 결정
-
+    //public list 반환, 현 위치에서 반경 2km 내에 public인 모든 글 반환
     @GetMapping("/posts/public/list")
-    public ResponseEntity<List<PostDto>> showPostsPubicList() {
-        List<PostDto> posts = postService.getPostsPublicList();
+    public ResponseEntity<List<PostDto>> showPostsPubicList(float latitude, float longitude) {
+        List<PostDto> posts = postService.getPostsPublicList(latitude, longitude);
         return ResponseEntity.ok(posts);
     }
 }
Index: ping/src/main/java/com/b6122/ping/repository/PostRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b6122.ping.repository;\r\n\r\nimport com.b6122.ping.domain.Post;\r\n\r\nimport jakarta.persistence.EntityManager;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\nimport org.springframework.data.jpa.repository.Modifying;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.lang.management.RuntimeMXBean;\r\nimport java.util.List;\r\n\r\n@Repository\r\n@RequiredArgsConstructor\r\npublic class PostRepository {\r\n\r\n    private final EntityManager em;\r\n\r\n    @Query(\"SELECT p FROM Post p WHERE p.latitude = :latitude AND p.longitude = :longitude ORDER BY p.createdDate DESC\")\r\n    public List<Post> findByLocation(@Param(\"latitude\") float latitude, @Param(\"longitude\") float longitude) {\r\n        return null;\r\n    }\r\n    @Query(\"SELECT p FROM Post p WHERE p.latitude = :latitude AND p.longitude = :longitude AND p.user.id = :uid ORDER BY p.createdDate DESC\")\r\n    public List<Post> findByLocationUser(@Param(\"latitude\") float latitude, @Param(\"longitude\") float longitude, @Param(\"uid\") long uid) {\r\n        return null;\r\n    }\r\n\r\n\r\n    @Modifying// 조회수 중복 방지 추가 구현\r\n    @Query(\"update Post p set p.viewCount = :viewCount where p.id =:id\")\r\n    public int updateViewCount(@Param(\"viewCount\") int viewCount, @Param(\"id\") Long id){\r\n        return 0;\r\n    }\r\n\r\n\r\n    @Modifying\r\n    @Query(\"update Post p set p.likeCount = p.likeCount + 1 where p.id =:pid\")\r\n    public int upLikeCount(@Param(\"id\") Long pid){\r\n        return 0;\r\n    }\r\n\r\n    @Modifying\r\n    @Query(\"update Post p set p.likeCount = p.likeCount - 1 where p.id =:pid\")\r\n    public int downLikeCount(@Param(\"id\") Long pid){\r\n        return 0;\r\n    }\r\n\r\n\r\n    public  Post findById(Long id){\r\n        return em.createQuery(\"select p from Post p where p.id = :id\", Post.class)\r\n                .setParameter(\"id\", id)\r\n                .getSingleResult();\r\n    }\r\n\r\n//    @Query(\"SELECT p FROM Post p WHERE p.user.id= :uid  ORDER BY p.createdDate DESC\")\r\n    public List<Post> findByUid(Long uid){\r\n        return em.createQuery(\"select p from Post p\" +\r\n                        \" where p.user.id = :uid\" +\r\n                        \" order by p.createdDate\", Post.class) //최신순으로 반환\r\n                .setParameter(\"uid\", uid)\r\n                .getResultList();\r\n    }\r\n\r\n    public Long save(Post p) {\r\n        em.persist(p);\r\n        return p.getId();\r\n    }\r\n\r\n    public long updatePost(Post p) {\r\n        return em.createQuery(\"update Post p set location =:location, latitude =:latitude, longitude =:longitude, title =:title, content =:content, scope =:scope, imgPaths =:imgPaths\", Long.class)\r\n                .setParameter(\"location\", p.getLocation())\r\n                .setParameter(\"latitude\", p.getLatitude())\r\n                .setParameter(\"longitude\", p.getLongitude())\r\n                .setParameter(\"title\", p.getTitle())\r\n                .setParameter(\"content\", p.getContent())\r\n                .setParameter(\"scope\", p.getScope())\r\n                .setParameter(\"imgPaths\", p.getImgPaths())\r\n                .executeUpdate();\r\n    }\r\n\r\n    public List<Post> findNonePrivateByUid(Long uid) {\r\n        return em.createQuery(\"select p from Post p\" +\r\n                \"where p.user.id = :uid and p.scope != \\\"private\\\" \" +\r\n                        \"order by p.createdDate, Post.class\") //최신순\r\n                .setParameter(\"uid\", uid)\r\n                .getResultList();\r\n    }\r\n\r\n    public List<Post> findPublicPosts() {\r\n        return em.createQuery(\"select p form post p\"+\r\n                \"where p.scope = \\\"public\\\"\"+\r\n                \"order by p.createdDate, post.class\")\r\n                .getResultList();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ping/src/main/java/com/b6122/ping/repository/PostRepository.java b/ping/src/main/java/com/b6122/ping/repository/PostRepository.java
--- a/ping/src/main/java/com/b6122/ping/repository/PostRepository.java	
+++ b/ping/src/main/java/com/b6122/ping/repository/PostRepository.java	
@@ -90,9 +90,9 @@
                 .getResultList();
     }
 
-    public List<Post> findPublicPosts() {
+    public List<Post> findPublicPosts(float latitude, float longitude) {
         return em.createQuery("select p form post p"+
-                "where p.scope = \"public\""+
+                "where p.scope = \"public\" and ST_Distance_Sphere(point(longitude, latitude), point(longitude, latitude) <= 2000" +
                 "order by p.createdDate, post.class")
                 .getResultList();
     }
Index: ping/src/main/java/com/b6122/ping/dto/PostDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b6122.ping.dto;\r\n\r\nimport com.b6122.ping.domain.Like;\r\nimport com.b6122.ping.domain.Post;\r\nimport com.b6122.ping.domain.PostScope;\r\nimport com.b6122.ping.repository.LikeRepository;\r\nimport jakarta.persistence.*;\r\n\r\nimport lombok.Getter;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\n\r\nimport java.util.List;\r\n\r\n//dto 분리,메모리 효율을 위해\r\n@Getter @Setter\r\n@RequiredArgsConstructor\r\npublic class PostDto {\r\n    private  Long id; //post id\r\n\r\n    private Long uid; //사용자\r\n\r\n    private String location; //위치\r\n\r\n    private float  latitude; //위도\r\n\r\n    private float longitude; //경도\r\n\r\n    private String title; // 제목\r\n\r\n    private String content;\r\n\r\n    private PostScope scope; //공개 범위 [private, friends, public]\r\n\r\n    private int viewCount; // 조회수\r\n\r\n    private int likeCount; // 좋아요 수\r\n\r\n    private boolean myLike; //본인이 글에 좋아요 눌렀는지\r\n\r\n    private LocalDateTime createdDate; //생성 날짜\r\n\r\n    private LocalDateTime modifiedDate; //수정 날짜\r\n\r\n    private String contentPreview; //미리보기 15자\r\n\r\n    //프론트에서 이미지 파일 받을때\r\n    private List<MultipartFile> imgs;\r\n    private MultipartFile firstImg;\r\n\r\n\r\n    //프론트로 이미지 파일 전달\r\n    private byte[] imgByte;\r\n    private List<byte[]> imgsByte;\r\n\r\n    @OneToMany(mappedBy = \"post\")\r\n    private List<Like> likes = new ArrayList<>();\r\n\r\n\r\n\r\n\r\n    //pin- 위도, 경도,postId\r\n    //Map위에 pin 보여주기\r\n    public static PostDto pinMap(Post post) {\r\n        PostDto postDto = new PostDto();\r\n        postDto.setId(post.getId());\r\n        postDto.setLongitude(post.getLongitude());\r\n        postDto.setLatitude(post.getLatitude());\r\n        return postDto;\r\n    }\r\n\r\n    //Home-Map 토글, pin클릭시 postPreview보여주기\r\n    public static PostDto postPreviewMap(Post post) {\r\n        PostDto postDto = new PostDto();\r\n        postDto.setId(post.getId());\r\n        postDto.setTitle(post.getTitle());\r\n        postDto.setScope(post.getScope());\r\n        postDto.setCreatedDate(post.getCreatedDate());\r\n        postDto.setContentPreview(truncateContent(post.getContent(), 15)); // Adjust for content preview\r\n        postDto.setImgByte(post.getByteArrayOfFirstImgByPath()); //대표 이미지 가져오기\r\n        return postDto;\r\n    }\r\n\r\n\r\n    //Home-List 토글\r\n    public static PostDto postPreviewList(Post post, LikeRepository likeRepository) {\r\n        PostDto postDto = new PostDto();\r\n        postDto.setId(post.getId());\r\n        postDto.setTitle(post.getTitle());\r\n        postDto.setScope(post.getScope());\r\n        postDto.setLikeCount(post.getLikeCount());\r\n        postDto.setMyLike(likeRepository.checkMyLike(post.getId(), post.getUser().getId()));//사용자가 post에 좋아요 눌렀다면 myLike == True\r\n        postDto.setCreatedDate(post.getCreatedDate());\r\n        postDto.setContentPreview(truncateContent(post.getContent(), 15)); // Adjust for content preview\r\n        postDto.setImgByte(post.getByteArrayOfFirstImgByPath()); //대표 이미지 가져오기\r\n        return postDto;\r\n    }\r\n\r\n\r\n    //글 보기\r\n    public static PostDto postInfo(Post post, LikeRepository likeRepository) {\r\n        PostDto postDto = new PostDto();\r\n        postDto.setId(post.getId());\r\n        postDto.setTitle(post.getTitle());\r\n        postDto.setScope(post.getScope());\r\n        postDto.setLikeCount(post.getLikeCount());\r\n        postDto.setMyLike(likeRepository.checkMyLike(post.getId(), post.getUser().getId()));//사용자가 post에 좋아요 눌렀다면 myLike == True\r\n        postDto.setCreatedDate(post.getCreatedDate());\r\n        postDto.setCreatedDate(post.getModifiedDate());\r\n        postDto.setContent(post.getContent());\r\n        postDto.setImgsByte(post.getByteArraysOfImgsByPaths()); //모든 이미지 반환\r\n        return postDto;\r\n    }\r\n\r\n\r\n    private static String truncateContent(String content, int maxLength) {\r\n        if (content.length() <= maxLength) {\r\n            return content;\r\n        } else {\r\n            return content.substring(0, maxLength) + \"...\";\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ping/src/main/java/com/b6122/ping/dto/PostDto.java b/ping/src/main/java/com/b6122/ping/dto/PostDto.java
--- a/ping/src/main/java/com/b6122/ping/dto/PostDto.java	
+++ b/ping/src/main/java/com/b6122/ping/dto/PostDto.java	
@@ -107,6 +107,7 @@
     public static PostDto postInfo(Post post, LikeRepository likeRepository) {
         PostDto postDto = new PostDto();
         postDto.setId(post.getId());
+        postDto.setUid(post.getUser().getId());
         postDto.setTitle(post.getTitle());
         postDto.setScope(post.getScope());
         postDto.setLikeCount(post.getLikeCount());
Index: ping/src/main/java/com/b6122/ping/service/PostService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b6122.ping.service;\r\n\r\nimport com.b6122.ping.domain.Like;\r\nimport com.b6122.ping.domain.Post;\r\nimport com.b6122.ping.domain.PostScope;\r\nimport com.b6122.ping.domain.User;\r\nimport com.b6122.ping.dto.PostDto;\r\nimport com.b6122.ping.repository.LikeRepository;\r\nimport com.b6122.ping.repository.PostRepository;\r\nimport com.b6122.ping.repository.datajpa.UserDataRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class PostService {\r\n    @Autowired\r\n    private final PostRepository postRepository;\r\n\r\n    @Autowired\r\n    private final LikeRepository likeRepository;\r\n\r\n    private final UserDataRepository userDataRepository;\r\n\r\n    @Transactional\r\n    public Long createPost(PostDto postDto){\r\n        Post post;\r\n        post = new Post();\r\n        User user = userDataRepository.findById(postDto.getUid()).orElseThrow(RuntimeException::new);\r\n        post.setUser(user);\r\n        post.setLocation(postDto.getLocation());\r\n        post.setLatitude(postDto.getLatitude());\r\n        post.setLongitude(postDto.getLongitude());\r\n        post.setTitle(postDto.getTitle());\r\n        post.setContent(postDto.getContent());\r\n        post.setScope(postDto.getScope());\r\n        post.setViewCount(postDto.getViewCount());\r\n        post.setLikeCount(postDto.getLikeCount());\r\n        post.setLikes(postDto.getLikes());\r\n        post.saveImagesInStorage(postDto.getImgs()); //이미지 저장 MultiPartfile->path\r\n        return postRepository.save(post);\r\n    }\r\n\r\n    //post 수정\r\n    public Long modifyPost(PostDto postDto){\r\n        Post post;\r\n        post = new Post();\r\n        post.setId(postDto.getId());\r\n        post.setLocation(postDto.getLocation());\r\n        post.setLatitude(postDto.getLatitude());\r\n        post.setLongitude(postDto.getLongitude());\r\n        post.setTitle(postDto.getTitle());\r\n        post.setContent(postDto.getContent());\r\n        post.setScope(postDto.getScope());\r\n        post.saveImagesInStorage(postDto.getImgs()); //이미지 저장 MultiPartfile->path\r\n        return postRepository.updatePost(post);\r\n    }\r\n\r\n    //글 전체보기 요청\r\n    public PostDto getPostInfo(Long pid, Long uid) {\r\n        Post post = postRepository.findById(pid);\r\n\r\n        if(post.getUser().getId().equals(uid)) {//사용자와 글 작성자와 다른 경우만 viewCount++\r\n            postRepository.updateViewCount(post.getViewCount() + 1, post.getId());\r\n        }\r\n\r\n        return PostDto.postInfo(post, likeRepository);\r\n    }\r\n\r\n    public void toggleLike(long postId, long userId) {\r\n        Optional<Like> existingLike = likeRepository.findByPostIdAndUserId(postId, userId);\r\n\r\n        if (existingLike.isPresent()) {\r\n            // If like exists, delete it\r\n            likeRepository.delete(existingLike.get().getId());\r\n            postRepository.downLikeCount(postId);\r\n        }\r\n\r\n        else {\r\n            // If like does not exist, create it\r\n            Like newLike = new Like();\r\n//            newLike.getPost().setId(postId);\r\n//            newLike.getUser().setId(userId);\r\n            newLike.setPost(postRepository.findById(postId));\r\n            newLike.setUser(userDataRepository.findById(userId).orElseThrow(RuntimeException::new));\r\n            likeRepository.save(newLike);\r\n            postRepository.upLikeCount(postId);\r\n        }\r\n    }\r\n\r\n\r\n    //pin 클릭시 해당 위치의 postList 반환,home friend public 동일한 함수 사용\r\n    public List<PostDto> getPostsPreviewPin(List<Long> pids ) {\r\n        List<Post> posts = null;\r\n\r\n        for(Long pid : pids){\r\n            posts.add(postRepository.findById(pid));\r\n        }\r\n\r\n        return posts.stream().map(PostDto::postPreviewMap).collect(Collectors.toList());\r\n    }\r\n\r\n\r\n\r\n    //Home\r\n    //Home-Map 클릭 전, 내가 작성한 모든 글의 pin띄우기\r\n    public List<PostDto> getPinsHomeMap(long uid) {\r\n        List<Post> posts = postRepository.findByUid(uid);\r\n        return posts.stream().map(PostDto::pinMap).collect(Collectors.toList());\r\n    }\r\n\r\n    //Home-List 토글, postList 반환\r\n    public List<PostDto> getPostsHomeList(Long uid) {\r\n        List<Post> posts = postRepository.findByUid(uid);\r\n        return posts.stream()\r\n                .map(post-> PostDto.postPreviewList(post, likeRepository))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n\r\n\r\n\r\n    //Friends\r\n    //친구가 작성한 글의 pin 반환\r\n    public List<PostDto> getPinsFriendsMap(List<Long> uids) {\r\n        List<Post> posts = null;\r\n        for(Long uid : uids){\r\n             posts.addAll(postRepository.findNonePrivateByUid(uid));\r\n        }\r\n\r\n        return posts.stream().map(PostDto::pinMap).collect(Collectors.toList());\r\n    }\r\n\r\n\r\n    //친구 post list preview\r\n    public List<PostDto> getPostsFriendsList(List<Long> uids) {\r\n        List<Post> posts = null;\r\n        for(Long uid : uids){\r\n            posts.addAll(postRepository.findNonePrivateByUid(uid));\r\n        }\r\n\r\n        return posts.stream()\r\n                .map(post-> PostDto.postPreviewList(post, likeRepository))\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n\r\n\r\n    //Public\r\n    public List<PostDto> getPinsPublicMap() {\r\n        List<Post> posts = postRepository.findPublicPosts();\r\n        return posts.stream().map(PostDto::pinMap).collect(Collectors.toList());\r\n    }\r\n\r\n    public List<PostDto> getPostsPublicList(){\r\n        List<Post> posts = postRepository.findPublicPosts();\r\n\r\n        return posts.stream()\r\n                .map(post-> PostDto.postPreviewList(post, likeRepository))\r\n                .collect(Collectors.toList());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ping/src/main/java/com/b6122/ping/service/PostService.java b/ping/src/main/java/com/b6122/ping/service/PostService.java
--- a/ping/src/main/java/com/b6122/ping/service/PostService.java	
+++ b/ping/src/main/java/com/b6122/ping/service/PostService.java	
@@ -154,13 +154,13 @@
 
 
     //Public
-    public List<PostDto> getPinsPublicMap() {
-        List<Post> posts = postRepository.findPublicPosts();
+    public List<PostDto> getPinsPublicMap(float latitude, float longitude) {
+        List<Post> posts = postRepository.findPublicPosts(latitude, longitude);
         return posts.stream().map(PostDto::pinMap).collect(Collectors.toList());
     }
 
-    public List<PostDto> getPostsPublicList(){
-        List<Post> posts = postRepository.findPublicPosts();
+    public List<PostDto> getPostsPublicList(float latitude, float longitude){
+        List<Post> posts = postRepository.findPublicPosts(latitude, longitude);
 
         return posts.stream()
                 .map(post-> PostDto.postPreviewList(post, likeRepository))
Index: ping/src/main/java/com/b6122/ping/domain/Post.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b6122.ping.domain;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.Setter;\r\nimport org.hibernate.annotations.ColumnDefault;\r\nimport org.springframework.core.io.Resource;\r\nimport org.springframework.core.io.UrlResource;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.nio.file.Path;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\n\r\n\r\n//이미지 파일 가져오기\r\n//friend 글 목록 페이지: 이미지 , 제몯, 냉ㅇ 15자, 공개범위, 날짜, 좋앙, 요청 id가 좋앙 눌러는지, 최신순\r\n//탈퇴 시 글 삭제\r\n//friend map: 받은 위치정보에 해당하는 글을 찾아 같은 주소로 이미지, 냉ㅇ,공개 범위, 날짜, 제목\r\n//public : 공개범위가 public인 글만\r\n\r\n@Entity\r\n@Getter @Setter\r\n@Table(name = \"post\")\r\n@NoArgsConstructor\r\npublic class Post extends TimeEntity{\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"post_id\")\r\n    private Long id ; //post id\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"user_id\")\r\n    private User user; //사용자\r\n\r\n    @Column\r\n    private String location; //위치\r\n\r\n    @Column\r\n    private float  latitude; //위도\r\n\r\n    @Column\r\n    private float longitude; //경도\r\n\r\n    @Column(name = \"title\")\r\n    private String title; // 제목\r\n    @Column(name = \"content\", nullable = false)\r\n    private String content;\r\n    @Enumerated(EnumType.STRING)\r\n    private PostScope scope; //공개 범위 [private, friends, public]\r\n    @ColumnDefault(\"0\")\r\n    @Column(name = \"viewCount\")\r\n    private int viewCount; // 조회수\r\n    @ColumnDefault(\"0\")\r\n    @Column(name = \"likeCount\")\r\n    private int likeCount; // 좋아요 수\r\n    @OneToMany(mappedBy = \"post\")\r\n    private List<Like> likes = new ArrayList<>();\r\n\r\n    @Column\r\n    private List<String> imgPaths = new ArrayList<>();\r\n\r\n\r\n    //연관관계 매서드//\r\n    public void setUser(User user) {\r\n        this.user = user;\r\n        user.addPost(this); //user의 posts list에 post(this) 추가\r\n    }\r\n\r\n\r\n    //이미지 파일 저장\r\n    public List<String> saveImagesInStorage(List<MultipartFile> images) {\r\n        List<String> savedImageNames = new ArrayList<>();\r\n\r\n        for (MultipartFile image : images) {\r\n            // Generate a random file name to prevent duplicate file names\r\n            String randomFileName = UUID.randomUUID().toString();\r\n\r\n            // Get the original file extension\r\n            String originalFilename = image.getOriginalFilename();\r\n            String fileExtension = originalFilename != null ? originalFilename.substring(originalFilename.lastIndexOf(\".\")) : \"\";\r\n\r\n            // Generate the full file path with the random file name and original file extension\r\n            String imagePath = \"/path/to/your/directory/\" + randomFileName + fileExtension;\r\n\r\n            // Save the file\r\n            try {\r\n                image.transferTo(new File(imagePath));\r\n                savedImageNames.add(imagePath);\r\n            } catch (IOException e) {\r\n                // Handle file saving error\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        return savedImageNames; //local storage path list return\r\n    }\r\n\r\n    //대표 이미지 반환\r\n    public byte[] getByteArrayOfFirstImgByPath() {\r\n//        byte[] fileByteArray = Files.readAllBytes(\"파일의 절대경로\");\r\n        try {\r\n            Resource resource = new UrlResource(Path.of(this.getImgPaths().get(0)).toUri());\r\n            if (resource.exists() && resource.isReadable()) {\r\n                // InputStream을 사용하여 byte 배열로 변환\r\n                try (InputStream inputStream = resource.getInputStream()) {\r\n                    byte[] data = new byte[inputStream.available()];\r\n                    inputStream.read(data);\r\n                    return data;\r\n                }\r\n            } else {\r\n                // 이미지를 찾을 수 없는 경우 예외 또는 다른 처리 방법을 선택\r\n                throw new RuntimeException(\"Image not found\");\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    //모든 이미지 반환\r\n    public List<byte[]> getByteArraysOfImgsByPaths() {\r\n\r\n        List<String> imagePaths = this.getImgPaths();\r\n        List<byte[]> byteArrays = new ArrayList<>();\r\n\r\n        for (String imagePath : imagePaths) {\r\n            try {\r\n                Resource resource = new UrlResource(Path.of(imagePath).toUri());\r\n                if (resource.exists() && resource.isReadable()) {\r\n                    // InputStream을 사용하여 byte 배열로 변환\r\n                    try (InputStream inputStream = resource.getInputStream()) {\r\n                        byte[] data = inputStream.readAllBytes();\r\n                        byteArrays.add(data);\r\n                    }\r\n                } else {\r\n                    // 이미지를 찾을 수 없는 경우 예외 또는 다른 처리 방법을 선택\r\n                    throw new RuntimeException(\"Image not found: \" + imagePath);\r\n                }\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"Error reading image: \" + imagePath, e);\r\n            }\r\n        }\r\n\r\n        return byteArrays;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ping/src/main/java/com/b6122/ping/domain/Post.java b/ping/src/main/java/com/b6122/ping/domain/Post.java
--- a/ping/src/main/java/com/b6122/ping/domain/Post.java	
+++ b/ping/src/main/java/com/b6122/ping/domain/Post.java	
@@ -3,7 +3,6 @@
 import jakarta.persistence.*;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import org.hibernate.annotations.ColumnDefault;
 import org.springframework.core.io.Resource;
@@ -19,12 +18,6 @@
 import java.util.UUID;
 
 
-//이미지 파일 가져오기
-//friend 글 목록 페이지: 이미지 , 제몯, 냉ㅇ 15자, 공개범위, 날짜, 좋앙, 요청 id가 좋앙 눌러는지, 최신순
-//탈퇴 시 글 삭제
-//friend map: 받은 위치정보에 해당하는 글을 찾아 같은 주소로 이미지, 냉ㅇ,공개 범위, 날짜, 제목
-//public : 공개범위가 public인 글만
-
 @Entity
 @Getter @Setter
 @Table(name = "post")
@@ -105,7 +98,6 @@
 
     //대표 이미지 반환
     public byte[] getByteArrayOfFirstImgByPath() {
-//        byte[] fileByteArray = Files.readAllBytes("파일의 절대경로");
         try {
             Resource resource = new UrlResource(Path.of(this.getImgPaths().get(0)).toUri());
             if (resource.exists() && resource.isReadable()) {
